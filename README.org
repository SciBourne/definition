#+author: SciBourne



#+title: Definition
Common Lisp eDSL for type declarations



#+PROPERTY: results silent
#+PROPERTY: header-args :results value scalar

#+STARTUP: showall
#+STARTUP: indent
#+STARTUP: hidestars
#+STARTUP: latexpreview

#+EXPORT_EXCLUDE_TAGS: emacs_only

#+html:<br><br>





* Table of contents    :github_only:
- [[#install][Install]]
- [[#examples][Examples]]
  - [[#special-binding][Special binding]]
    - [[#defconstant][Defconstant]]
    - [[#defparameter][Defparameter]]
    - [[#defvar][Defvar]]
  - [[#function-and-macros][Function and macros]]
    - [[#lambda][Lambda]]
    - [[#defun][Defun]]
    - [[#defmethod][Defmethod]]
    - [[#defmacro][Defmacro]]
  - [[#lexical-binding][Lexical binding]]
    - [[#let][Let]]
    - [[#prog][Prog]]
    - [[#flet][Flet]]
    - [[#labels][Labels]]
    - [[#macrolet][Macrolet]]
- [[#api-reference][API reference]]

#+html:<br><br>




* Table of contents    :emacs_only:
- [[Install]]
- [[Examples]]
  - [[Special binding]]
    - [[Defconstant]]
    - [[Defparameter]]
    - [[Defvar]]
  - [[Function and macros]]
    - [[Lambda]]
    - [[Defun]]
    - [[Defmethod]]
    - [[Defmacro]]
  - [[Lexical binding]]
    - [[Let]]
    - [[Prog]]
    - [[Flet]]
    - [[Labels]]
    - [[Macrolet]]
- [[API reference]]


#+html:<br><br>



* Install

Clone this package into your local project dir (by default: =~/quicklisp/local-projects/=)
#+begin_src shell
  git clone https://github.com/SciBourne/definition.git
#+end_src

Check:
#+begin_src lisp
  (ql:quickload :definition)
#+end_src

Import names into your package:
#+begin_src lisp
  (defpackage :my-package :use :cl :def)
  (in-package :my-package)
#+end_src

#+html:<br><br>




* Examples

#+html:<br>

** Special binding

*** Defconstant

#+html:<br>



*** Defparameter

#+html:<br>



*** Defvar

#+html:<br><br>




** Function and macros

*** Lambda

#+html:<br>


*** Defun

**** Without declarations (default)

#+begin_src lisp :exports code
  (defun my-function ()
    (+ 1 2 3))
#+end_src

#+html:<details>
#+html:<summary><i>macroexpand</i></summary>

#+begin_src lisp :exports both
  (macroexpand
   '(%defun my-function ()
     (+ 1 2 3)))
#+end_src

#+RESULTS:
: (PROGN
:  (EVAL-WHEN (:COMPILE-TOPLEVEL) (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
:  (SB-IMPL::%DEFUN 'MY-FUNCTION
:                   (SB-INT:NAMED-LAMBDA MY-FUNCTION
:                       NIL
:                     (BLOCK MY-FUNCTION (+ 1 2 3)))))
: T

#+html:</details>
#+html:<br></br>



#+begin_src lisp :exports code
  (defun my-function (x y &optional (z 0))
    (+ x y z))
#+end_src

#+html:<details>
#+html:<summary><i>macroexpand</i></summary>

#+begin_src lisp :exports both
  (macroexpand
   '(%defun my-function (x y &optional (z 0))
     (+ x y z)))
#+end_src

#+RESULTS:
: (PROGN
:  (EVAL-WHEN (:COMPILE-TOPLEVEL) (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
:  (SB-IMPL::%DEFUN 'MY-FUNCTION
:                   (SB-INT:NAMED-LAMBDA MY-FUNCTION
:                       (X Y &OPTIONAL (Z 0))
:                     (BLOCK MY-FUNCTION (+ X Y Z)))))
: T

#+html:</details>
#+html:<br><br>



**** With declaration

#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function (() -> nil)
     (pprint "Not return")))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM (FTYPE (FUNCTION NIL (VALUES &OPTIONAL)) MY-FUNCTION))
:  (DEFUN MY-FUNCTION () (PPRINT "Not return")))
: T

#+html:<br><br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function (() -> 'null)
     (format t "Return nil")))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM (FTYPE (FUNCTION NIL (VALUES NULL &OPTIONAL)) MY-FUNCTION))
:  (DEFUN MY-FUNCTION () (FORMAT T "Return nil")))
: T

#+html:<br><br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function ((any-arg T) -> T)
     any-arg))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM (FTYPE (FUNCTION (T) *) MY-FUNCTION))
:  (DEFUN MY-FUNCTION (ANY-ARG) (DECLARE (TYPE T ANY-ARG)) ANY-ARG))
: T

#+html:<br><br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function ((x 'fixnum y 'fixnum) -> 'fixnum)
     (+ x y )))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM
:   (FTYPE (FUNCTION (FIXNUM FIXNUM) (VALUES FIXNUM &OPTIONAL)) MY-FUNCTION))
:  (DEFUN MY-FUNCTION (X Y)
:    (DECLARE (TYPE FIXNUM X)
:             (TYPE FIXNUM Y))
:    (+ X Y)))
: T

#+html:<br><br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function ((x 'fixnum y 'fixnum &optional z '(or fixnum null))
                         -> '(or fixnum null))
     (when z (+ x y))))
#+end_src

#+RESULTS:
#+begin_example
(PROGN
 (DECLAIM
  (FTYPE
   (FUNCTION (FIXNUM FIXNUM &OPTIONAL (OR FIXNUM NULL))
    (VALUES (OR FIXNUM NULL) &OPTIONAL))
   MY-FUNCTION))
 (DEFUN MY-FUNCTION (X Y &OPTIONAL Z)
   (DECLARE (TYPE FIXNUM X)
            (TYPE FIXNUM Y)
            (TYPE (OR FIXNUM NULL) Z))
   (WHEN Z (+ X Y))))
T
#+end_example

#+html:<br><br>


#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function ((x 'fixnum y 'fixnum &aux (z (* x y)) 'fixnum)
                         -> 'fixnum)
     (+ x y z)))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM
:   (FTYPE (FUNCTION (FIXNUM FIXNUM) (VALUES FIXNUM &OPTIONAL)) MY-FUNCTION))
:  (DEFUN MY-FUNCTION (X Y &AUX (Z (* X Y)))
:    (DECLARE (TYPE FIXNUM X)
:             (TYPE FIXNUM Y)
:             (TYPE FIXNUM Z))
:    (+ X Y Z)))
: T

#+html:<br><br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function ((&optional
                          x '(or fixnum null)
                          (y 0) 'fixnum
                          (z 1 z-supplied-p) 'fixnum)

                         -> '(or fixnum null))
     (when z (+ x y))))
#+end_src

#+RESULTS:
#+begin_example
(PROGN
 (DECLAIM
  (FTYPE
   (FUNCTION (&OPTIONAL (OR FIXNUM NULL) FIXNUM FIXNUM)
    (VALUES (OR FIXNUM NULL) &OPTIONAL))
   MY-FUNCTION))
 (DEFUN MY-FUNCTION (&OPTIONAL X (Y 0) (Z 1 Z-SUPPLIED-P))
   (DECLARE (TYPE (OR FIXNUM NULL) X)
            (TYPE FIXNUM Y)
            (TYPE FIXNUM Z)
            (TYPE BOOLEAN Z-SUPPLIED-P))
   (WHEN Z (+ X Y))))
T
#+end_example

#+html:<br><br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun my-function ((a 'fixnum
                          b 'fixnum

                          &rest
                          rest-plist  ; always T

                          &key
                          c '(or fixnum null)
                          (d 0) 'fixnum
                          (e 1 e-supplied-p) 'fixnum
                          ((:f f)) '(or fixnum null)
                          ((:g g) 2) 'fixnum
                          ((:h h) 3 h-supplied-p) 'fixnum

                          &allow-other-keys)

                         -> 'cons)
     (list a b c e f g h rest
      (list e-supplied-p h-supplied-p))))
#+end_src

#+RESULTS:
#+begin_example
(PROGN
 (DECLAIM
  (FTYPE
   (FUNCTION
    (FIXNUM FIXNUM &REST T &KEY (:C (OR FIXNUM NULL)) (:D FIXNUM) (:E FIXNUM)
     (:F (OR FIXNUM NULL)) (:G FIXNUM) (:H FIXNUM) &ALLOW-OTHER-KEYS)
    (VALUES CONS &OPTIONAL))
   MY-FUNCTION))
 (DEFUN MY-FUNCTION
        (A B
         &REST REST-PLIST
         &KEY C (D 0) (E 1 E-SUPPLIED-P) ((:F F)) ((:G G) 2)
         ((:H H) 3 H-SUPPLIED-P) &ALLOW-OTHER-KEYS)
   (DECLARE (TYPE FIXNUM A)
            (TYPE FIXNUM B)
            (TYPE (OR FIXNUM NULL) C)
            (TYPE FIXNUM D)
            (TYPE FIXNUM E)
            (TYPE (OR FIXNUM NULL) F)
            (TYPE FIXNUM G)
            (TYPE FIXNUM H)
            (TYPE BOOLEAN E-SUPPLIED-P)
            (TYPE BOOLEAN H-SUPPLIED-P))
   (LIST A B C E F G H REST (LIST E-SUPPLIED-P H-SUPPLIED-P))))
T
#+end_example

#+html:<br><br>




*** Defmethod

#+html:<br>



*** Defmacro

#+html:<br><br>




** Lexical binding

*** Let

#+html:<br>



*** Prog

#+html:<br>



*** Flet

#+html:<br>



*** Labels

#+html:<br>



*** Macrolet

#+html:<br><br>




* API reference
Coming soon...
