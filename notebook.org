#+author: SciBourne



#+title: Definition
Common Lisp eDSL for type declarations



#+PROPERTY: results silent
#+PROPERTY: header-args :results value scalar :exports both

#+STARTUP: showall
#+STARTUP: indent
#+STARTUP: hidestars
#+STARTUP: latexpreview

#+html:<br><br>




* Table of contents
- [[Install]]
- [[Examples]]
  - [[Special binding]]
    - [[Defconstant]]
    - [[Defparameter]]
    - [[Defvar]]
  - [[Function and macros]]
    - [[Lambda]]
    - [[Defun]]
    - [[Defmethod]]
    - [[Defmacro]]
  - [[Lexical binding]]
    - [[Let]]
    - [[Prog]]
    - [[Flet]]
    - [[Labels]]
    - [[Macrolet]]
- [[API reference]]

#+html:<br><br>



* Install

From local project $a^2 = b$
#+begin_src lisp
  (ql:quickload :definition)
#+end_src

#+html:<br><br>




* Examples

#+html:<br>

** Special binding

*** Defconstant
Coming soon...

#+html:<br>



*** Defparameter
Coming soon...

#+html:<br>



*** Defvar
Coming soon...

#+html:<br><br>




** Function and macros

*** Lambda
Coming soon...

#+html:<br>


*** Defun

**** Without declarations (default)

#+begin_src lisp
  (macroexpand

   '(def:%defun func-1 ()
     (+ 1 2 3)))
#+end_src

#+RESULTS:
: (PROGN
:  (EVAL-WHEN (:COMPILE-TOPLEVEL) (SB-C:%COMPILER-DEFUN 'FUNC-1 T NIL NIL))
:  (SB-IMPL::%DEFUN 'FUNC-1
:                   (SB-INT:NAMED-LAMBDA FUNC-1
:                       NIL
:                     (BLOCK FUNC-1 (+ 1 2 3)))))
: T

#+html:<br>



#+begin_src lisp
  (macroexpand

   '(def:%defun func-2 (x y &optional (z 0))
     (+ x y z)))
#+end_src

#+RESULTS:
: (PROGN
:  (EVAL-WHEN (:COMPILE-TOPLEVEL) (SB-C:%COMPILER-DEFUN 'FUNC-2 T NIL NIL))
:  (SB-IMPL::%DEFUN 'FUNC-2
:                   (SB-INT:NAMED-LAMBDA FUNC-2
:                       (X Y &OPTIONAL (Z 0))
:                     (BLOCK FUNC-2 (+ X Y Z)))))
: T

#+html:<br>



**** With declaration

#+begin_src lisp
  (macroexpand

   '(def:%defun func-3 (() -> nil)
     (pprint "Not return")))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM (FTYPE NIL (VALUES &OPTIONAL) FUNC-3))
:  (DEFUN FUNC-3 () (PPRINT "Not return")))
: T



*** Defmethod
Coming soon...

#+html:<br>



*** Defmacro
Coming soon...

#+html:<br><br>




** Lexical binding

*** Let
Coming soon...

#+html:<br>



*** Prog
Coming soon...

#+html:<br>



*** Flet
Coming soon...

#+html:<br>



*** Labels
Coming soon...

#+html:<br>



*** Macrolet
Coming soon...

#+html:<br><br>




* API reference
Coming soon...
