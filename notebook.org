#+author: SciBourne



#+title: Definition
Common Lisp eDSL for type declarations



#+PROPERTY: results silent
#+PROPERTY: header-args :results value scalar

#+STARTUP: showall
#+STARTUP: indent
#+STARTUP: hidestars
#+STARTUP: latexpreview

#+EXPORT_EXCLUDE_TAGS: emacs_only

#+html:<br><br>





* Table of contents    :github_only:
- [[#install][Install]]
- [[#examples][Examples]]
  - [[#special-binding][Special binding]]
    - [[#defconstant][Defconstant]]
    - [[#defparameter][Defparameter]]
    - [[#defvar][Defvar]]
  - [[#function-and-macros][Function and macros]]
    - [[#lambda][Lambda]]
    - [[#defun][Defun]]
    - [[#defmethod][Defmethod]]
    - [[#defmacro][Defmacro]]
  - [[#lexical-binding][Lexical binding]]
    - [[#let][Let]]
    - [[#prog][Prog]]
    - [[#flet][Flet]]
    - [[#labels][Labels]]
    - [[#macrolet][Macrolet]]
- [[#api-reference][API reference]]

#+html:<br><br>




* Table of contents    :emacs_only:
- [[Install]]
- [[Examples]]
  - [[Special binding]]
    - [[Defconstant]]
    - [[Defparameter]]
    - [[Defvar]]
  - [[Function and macros]]
    - [[Lambda]]
    - [[Defun]]
    - [[Defmethod]]
    - [[Defmacro]]
  - [[Lexical binding]]
    - [[Let]]
    - [[Prog]]
    - [[Flet]]
    - [[Labels]]
    - [[Macrolet]]
- [[API reference]]


#+html:<br><br>



* Install

Clone this package into local project (by default: =~/quicklisp/local-projects/=)
#+begin_src shell
  git clone https://github.com/SciBourne/definition.git
#+end_src

Load and enter the package namespace:
#+begin_src lisp
  (ql:quickload :definition)
  (in-package   :definition)
#+end_src

#+RESULTS:
: #<PACKAGE "DEFINITION">

#+html:<br><br>




* Examples

#+html:<br>

** Special binding

*** Defconstant

#+html:<br>



*** Defparameter

#+html:<br>



*** Defvar

#+html:<br><br>




** Function and macros

*** Lambda

#+html:<br>


*** Defun

**** Without declarations (default)

#+begin_src lisp :exports both
  (macroexpand

   '(%defun func-1 ()
     (+ 1 2 3)))
#+end_src

#+RESULTS:
: (PROGN
:  (EVAL-WHEN (:COMPILE-TOPLEVEL) (SB-C:%COMPILER-DEFUN 'FUNC-1 T NIL NIL))
:  (SB-IMPL::%DEFUN 'FUNC-1
:                   (SB-INT:NAMED-LAMBDA FUNC-1
:                       NIL
:                     (BLOCK FUNC-1 (+ 1 2 3)))))
: T

#+html:<br>



#+begin_src lisp :exports both
  (macroexpand

   '(%defun func-2 (x y &optional (z 0))
     (+ x y z)))
#+end_src

#+RESULTS:
: (PROGN
:  (EVAL-WHEN (:COMPILE-TOPLEVEL) (SB-C:%COMPILER-DEFUN 'FUNC-2 T NIL NIL))
:  (SB-IMPL::%DEFUN 'FUNC-2
:                   (SB-INT:NAMED-LAMBDA FUNC-2
:                       (X Y &OPTIONAL (Z 0))
:                     (BLOCK FUNC-2 (+ X Y Z)))))
: T

#+html:<br>



**** With declaration

#+begin_src lisp :exports both
  (macroexpand

   '(%defun func-3 (() -> nil)
     (pprint "Not return")))
#+end_src

#+RESULTS:
: (PROGN
:  (DECLAIM (FTYPE (FUNCTION NIL (VALUES &OPTIONAL)) FUNC-3))
:  (DEFUN FUNC-3 () (PPRINT "Not return")))
: T

#+html:<br><br>



*** Defmethod

#+html:<br>



*** Defmacro

#+html:<br><br>




** Lexical binding

*** Let

#+html:<br>



*** Prog

#+html:<br>



*** Flet

#+html:<br>



*** Labels

#+html:<br>



*** Macrolet

#+html:<br><br>




* API reference
Coming soon...
